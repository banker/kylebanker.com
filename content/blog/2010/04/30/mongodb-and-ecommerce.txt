--- 
title:      MongoDB and E-commerce
desc:       Righting some misconceptions on MongoDB in e-commerce.
keywords:   nosql, mongodb, e-commerce, transactions, inventory
created_at: 2010-04-30 13:20:45.692078 -04:00
blog_post:  true
comments: true
layout: blog
filter:
- erb
- textile
--- 

There are still a number of misconceptions regarding MongoDB's
suitability for <nobr>e-commerce</nobr> sites. I refer, in particular, to this
"stackoverflow
posting":http://stackoverflow.com/questions/2581738/are-there-any-e-commerce-websites-that-use-nosql-databases.

The hesitant reaction there expressed is understandable, as most of the databases
falling under the NoSQL umbrella would fare poorly in an <nobr>e-commerce</nobr> setting.
But this is not the case with MongoDB. Indeed, with its support for rich data models,
dynamic, indexed queries, atomic operations, and replicated writes, MongoDB can
be a viable and even desirable database for <nobr>e-commerce</nobr>; here's why.

h2. Catalog Management

If you need some insight into the way in which catalog management is handled
with relational databases, have a quick look at the schemas of the popular
"Magento <nobr>e-commerce</nobr> framework":http://www.magentocommerce.com/wiki/development/magento_database_diagram or "Apache's OfBiz":https://cwiki.apache.org/confluence/display/OFBTECH/Data+Model+Diagrams.
What you'll see is a flurry of tables working together to provide a flexible schema
on top of a fundamentally inflexible style of database system.

What this means is that the data for any given product is spread out across
dozens of tables. This increases the complexity of the code required to persist
and query individual products and makes a shell-based inqury all but
impossible. Ask yourself if you'd rather write the SQL JOIN to pull together a
product modeled like this:

<div class="clear">
<img src="/assets/content/2010/magento-product-schema.png" />
</div>
<br />

Or issue a simple *find* from the MongoDB JavaScript shell to pull back a JSON
object like this:

<% uv :lang => "javascript", :theme => "twilight" do -%>
// Find a product object
db.products.find({'_id': ObjectID("4bd87bd8277d094c458d2fa5")});

{_id: ObjectID("4bd87bd8277d094c458d2a43"),
 title: "A Love Supreme [Original Recording Reissued]"
 author: "John Coltrane",
 author_id: ObjectID("4bd87bd8277d094c458d2fa5"),

 details: {
   number_of_discs: 1,
   label: "Impulse Records",
   issue_date: "December 9, 1964",
   average_customer_review: 4.95,
   asin: "B0000A118M"
 },

 pricing: {
  list: 1198,
  retail: 1099,
  savings: 99,
  pct_savings: 8
 },

 categories: [
   ObjectID("4bd87bd8277d094c458d2a43"),
   ObjectID("4bd87bd8277d094c458d2b44"),
   ObjectID("4bd87bd8277d094c458d29a1")
 }
}
<% end %>

Of course, this is not a complete representation of a product, but it does
demonstrate how many of the more trivial tables existing in a relational
representation can be dispensed with in a document representation.

For object-oriented data, documents simply make more sense, both
conceptually and performance-wise. A document-oriented representation of product
data means fewer entities (a handful of collections vs. dozens of tables),
better query performance (no server-side joins), and structures that fit the product
precisely. There's no longer any need to design some master schema that can
account for every single conceviable product.

Catalog management is essentially content management, a domain MongoDB excels at.
To read more about this, see the "Drupal presentation on their move to
MongoDB":http://sf2010.drupal.org/conference/sessions/mongodb-humongous-drupalr.

h2. Shopping Carts and Orders

Allowing that a shopping cart is merely an order in a 'cart' state, the
modeling of shopping carts and orders in MongoDB becomes quite straightforward:

<% uv :lang => "javascript", :theme => "twilight" do -%>
{'_id': objectid('4b980a6dea2c3f4579da141e'),
 'user_id': objectid('4b980a6dea2c3f4579a4f54'),
 'state': 'cart',

 'line_items': [
    {'sku': 'jc-432',
     'name': 'John Coltrane: A Love Supreme',
     'retail_price': 1099
    },

    {'sku': 'ly-211',
     'name': 'Larry Young: Unity',
     'retail_price': 1199
    },
  ],

 'shipping_address': {
   'street': '3333 Greene Ave.',
   'city': 'Brooklyn',
   'state': 'NY',
   'zip': '11216'
  },

  'subtotal': 2199
}
<% end %>

Notice that we can represent the order line items as an array of products. As is
usual with documents, this makes displaying the shopping cart more
straighforward, since no joins are involved. But it also solves the problem of
product versioning. It's often necessary to take a snapshot of a product when a
user purchases it. This can be accomplished in an RDBMS by linking to a
particular version of a product. Here, however, we simply store a snapshot of
the product in the order itself.

h3. Querying Orders

Since MongoDB supports dynamic queries and secondary indexes, querying for
orders is a snap. It's possible, for example, to define an index on
product sku, which allows for efficient queries on all orders of a given product:

<% uv :lang => "javascript", :theme => "twilight" do -%>
db.orders.ensureIndex({'line_items.sku': 1});
db.orders.find({'line_items.sku' => 'jc-431'});
<% end %>

With MongoDB, we can query on arbitrary attributes, so any query on the orders
collection is possible. And for common queries, we can define indexes for
greater efficiency.

h3. Aggregation

Of course, aggregation is also necessary. We'll want to report on orders in
different ways, and for that, map-reduce is available. As an example, here's how
to write a map-reduce command that aggregates order totals per zip code:

<% uv :lang => "javascript", :theme => "twilight" do -%>
map = "
  function() {
    emit(this['shipping_address']['zip'], {total: this.total})
  }"

reduce = "
  function(key, values) {
    var sum = 0;
    values.forEach(function(doc) {
      sum += doc.total;
    }

    return {total: sum};
  }"


db.orders.mapReduce(map, reduce, {out: 'order_totals_by_zip'});
<% end %>

For more on MongoDB's map-reduce, see "Map-Reduce Basics":http://kylebanker.com/blog/2009/12/mongodb-map-reduce-basics/.

h3. Updating Orders

h4. Incrementing Quantity

One way to go about adjusting quantity is to use the positional operator, which
lets you apply atomic operations to individual objects within an array. Here how
we change the number of Coltrane albums we're ordering:

<% uv :lang => "javascript", :theme => "twilight" do -%>
db.orders.update({'_id': order_id, 'line_items.sku':'jc-431'},
                 {'$set': {'line_items.$.quantity': 2}});
<% end %>

h4. Adding and Removing Items

Likewise, atomic operators solve the problem of adding and removing products
from the cart. For instace, we can use the *$push* atomic operator to add an
item to our cart:

<% uv :lang => "javascript", :theme => "twilight" do -%>
db.orders.update({'_id': order_id},
    {'$push': {'line_items':
      {'sku': 'md-12', 'price': 2500, 'title': 'Basketball'}}
     '$inc': {'subtotal': 2500}});
<% end %>

When changing quantity and changing the cart items themselves, it's
necessary to update the order totals. Notice that we use the *$inc* operator to
handle this.

h2. Inventory

Not all <nobr>e-commerce</nobr> sites need inventory management. But for those that do, MongoDB
can rise to the ocassion.

One way to model inventory is to store a separate document per
physical item in our warehouse. So, for example, if our warehouse has
twenty copies of the Coltrane album, that translates to twenty distinct
documents in our inventory collection. Each document looks something like this:

<% uv :lang => "javascript", :theme => "twilight" do -%>
{'_id': objectid('4b980a6dea2c3f4579da432a'),
 'sku': 'jc-431',
 'state': 'available',
 'expires': null,
 'order_id': null
}
<% end %>

When a user tries to add an item to the cart, a findAndModify command can be
issued to atomically mark the item as in-cart, associate the item with a given
order, and set an expiration time:

<% uv :lang => "javascript", :theme => "twilight" do -%>
query = {'sku': 'jc-431', 'state': 'available'};

update = {'$set':
          {'state':    'cart',
           'order_id': order_id,
           'expires':  Date.now() + 15 * 60}};

item = db.inventory.findAndModify(query: query, update: update);
<% end %>

If we get an item back from the *findAndModify* operation, we know we have a unique lock on that
item, and we can store it in our cart. When the user goes to check out, the
item's state can be advance to 'purchased,' or whatever the case calls for.

Meanwhile, we can run a script in the background that frees cart inventory not
purchased in the fifteen-minute window. The update is trivial:

<% uv :lang => "javascript", :theme => "twilight" do -%>
db.inventory.update({'state': 'available', 'expires': {'$lt': Date.now()}},
  {'$set' {'state': 'available', 'expires': null, 'order_id': null}},
  {multi: true});
<% end %>

h2. Transactions, Consistency, and Durability

A lot of the arguments levied against NoSQL in <nobr>e-commerce</nobr> center
around transactions, consistency, and durability. A few points, then, are
worth noting.

Concerning transactions, it is true that MongoDB doesn't support the multi-object
kind; however, it does support atomic operations on individual documents. And
this, combined with the document-oriented modeling just described and a little
creativity, is adequate to many <nobr>e-commerce</nobr> problems. Certainly, if we needed to
literally debit one account and credit another in the same operation, or if we
wanted rollback, we'd need full-fledged transactions. However, the
transactionality that MongoDB may be sufficient for most, if not all, <nobr>e-commerce</nobr>
operations.

If you're concerned about consistency and durability, know that write
operations in MongoDB can be made consistent across connections. Furthermore,
MongoDB 1.5 support near-real-time replication, so that it's now possible to
assure that an operation has been replicated before returning. See the documentation on
"replication
acknowldgment":http://www.mongodb.org/display/DOCS/Replication#Replication-ReplicationAcknowledgementviagetlasterror
for details.

h2. Conclusion

Certainly most NoSQL databases weren't built with <nobr>e-commerce</nobr> in
mind. Databases that lack rich data models, dynamic queries, and any notion of
transactionality can't be expected to compete in the <nobr>e-commerce</nobr>
space, and so it's understandable how one might think that MongoDB couldn't, either.

But for the parts of an <nobr>e-commerce</nobr> site comprising content management, using
MongoDB will mean a clear win. And even for the more transactional components of the
system, MongoDB has features that make the prospect of running an entire
e-commerce site on it a real possibility. So while the ideas in this post are
just a sketch, let's not run from the notion that a document database just might
do <nobr>e-commerce</nobr>, and do it well.
